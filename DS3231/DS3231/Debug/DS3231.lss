
DS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800212  00800212  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001863  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9c  00000000  00000000  00001fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa0  00000000  00000000  00002f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000495  00000000  00000000  000043ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 35       	cpi	r26, 0x5B	; 91
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	bb d1       	rcall	.+886    	; 0x496 <main>
 120:	2c c2       	rjmp	.+1112   	; 0x57a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ds3231>:
	MSB = i2c_readAck();                    // read second and return Positive ACK
	LSB= i2c_readNack();                    // read minute and return Positive ACK
	i2c_stop();                           // Stop I2C communication after reading the Date
    return ( MSB + ((LSB >> 6) * 0.25));
	
}
 124:	5f d0       	rcall	.+190    	; 0x1e4 <i2c_init>
 126:	67 d0       	rcall	.+206    	; 0x1f6 <i2c_start>
 128:	80 ed       	ldi	r24, 0xD0	; 208
 12a:	77 d0       	rcall	.+238    	; 0x21a <i2c_write>
 12c:	8e e0       	ldi	r24, 0x0E	; 14
 12e:	75 d0       	rcall	.+234    	; 0x21a <i2c_write>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	73 d0       	rcall	.+230    	; 0x21a <i2c_write>
 134:	69 c0       	rjmp	.+210    	; 0x208 <i2c_stop>
 136:	08 95       	ret

00000138 <ds3231_SetDateTime>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	5b d0       	rcall	.+182    	; 0x1f6 <i2c_start>
 140:	80 ed       	ldi	r24, 0xD0	; 208
 142:	6b d0       	rcall	.+214    	; 0x21a <i2c_write>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	69 d0       	rcall	.+210    	; 0x21a <i2c_write>
 148:	88 81       	ld	r24, Y
 14a:	67 d0       	rcall	.+206    	; 0x21a <i2c_write>
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	65 d0       	rcall	.+202    	; 0x21a <i2c_write>
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	63 d0       	rcall	.+198    	; 0x21a <i2c_write>
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	61 d0       	rcall	.+194    	; 0x21a <i2c_write>
 158:	8c 81       	ldd	r24, Y+4	; 0x04
 15a:	5f d0       	rcall	.+190    	; 0x21a <i2c_write>
 15c:	8d 81       	ldd	r24, Y+5	; 0x05
 15e:	5d d0       	rcall	.+186    	; 0x21a <i2c_write>
 160:	8e 81       	ldd	r24, Y+6	; 0x06
 162:	5b d0       	rcall	.+182    	; 0x21a <i2c_write>
 164:	51 d0       	rcall	.+162    	; 0x208 <i2c_stop>
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <ds3231_GetDateTime>:
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	41 d0       	rcall	.+130    	; 0x1f6 <i2c_start>
 174:	80 ed       	ldi	r24, 0xD0	; 208
 176:	51 d0       	rcall	.+162    	; 0x21a <i2c_write>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	4f d0       	rcall	.+158    	; 0x21a <i2c_write>
 17c:	45 d0       	rcall	.+138    	; 0x208 <i2c_stop>
 17e:	3b d0       	rcall	.+118    	; 0x1f6 <i2c_start>
 180:	81 ed       	ldi	r24, 0xD1	; 209
 182:	4b d0       	rcall	.+150    	; 0x21a <i2c_write>
 184:	5c d0       	rcall	.+184    	; 0x23e <i2c_readAck>
 186:	88 83       	st	Y, r24
 188:	5a d0       	rcall	.+180    	; 0x23e <i2c_readAck>
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	58 d0       	rcall	.+176    	; 0x23e <i2c_readAck>
 18e:	8a 83       	std	Y+2, r24	; 0x02
 190:	56 d0       	rcall	.+172    	; 0x23e <i2c_readAck>
 192:	8b 83       	std	Y+3, r24	; 0x03
 194:	54 d0       	rcall	.+168    	; 0x23e <i2c_readAck>
 196:	8c 83       	std	Y+4, r24	; 0x04
 198:	52 d0       	rcall	.+164    	; 0x23e <i2c_readAck>
 19a:	8d 83       	std	Y+5, r24	; 0x05
 19c:	5b d0       	rcall	.+182    	; 0x254 <i2c_readNack>
 19e:	8e 83       	std	Y+6, r24	; 0x06
 1a0:	33 d0       	rcall	.+102    	; 0x208 <i2c_stop>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <dec2bcd>:

uint8_t dec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
 1a8:	9d ec       	ldi	r25, 0xCD	; 205
 1aa:	89 9f       	mul	r24, r25
 1ac:	91 2d       	mov	r25, r1
 1ae:	11 24       	eor	r1, r1
 1b0:	96 95       	lsr	r25
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	39 2f       	mov	r19, r25
 1b8:	33 0f       	add	r19, r19
 1ba:	23 2f       	mov	r18, r19
 1bc:	22 0f       	add	r18, r18
 1be:	22 0f       	add	r18, r18
 1c0:	23 0f       	add	r18, r19
 1c2:	82 1b       	sub	r24, r18
}
 1c4:	20 e1       	ldi	r18, 0x10	; 16
 1c6:	92 9f       	mul	r25, r18
 1c8:	80 0d       	add	r24, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	08 95       	ret

000001ce <bcd2dec>:

// Convert Binary Coded Decimal (BCD) to Decimal

uint8_t bcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
 1ce:	98 2f       	mov	r25, r24
 1d0:	92 95       	swap	r25
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	99 0f       	add	r25, r25
 1d6:	29 2f       	mov	r18, r25
 1d8:	22 0f       	add	r18, r18
 1da:	22 0f       	add	r18, r18
 1dc:	92 0f       	add	r25, r18
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	89 0f       	add	r24, r25
 1e2:	08 95       	ret

000001e4 <i2c_init>:
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }
}/* i2c_start_wait */
 1e4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 1ee:	84 ea       	ldi	r24, 0xA4	; 164
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1f4:	08 95       	ret

000001f6 <i2c_start>:
 1f6:	84 ea       	ldi	r24, 0xA4	; 164
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <i2c_start+0xa>
 206:	08 95       	ret

00000208 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 208:	84 e9       	ldi	r24, 0x94	; 148
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 20e:	ec eb       	ldi	r30, 0xBC	; 188
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	84 fd       	sbrc	r24, 4
 216:	fd cf       	rjmp	.-6      	; 0x212 <i2c_stop+0xa>
}/* i2c_stop */
 218:	08 95       	ret

0000021a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 21a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 21e:	84 e8       	ldi	r24, 0x84	; 132
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 224:	ec eb       	ldi	r30, 0xBC	; 188
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 23       	and	r24, r24
 22c:	ec f7       	brge	.-6      	; 0x228 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 22e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 232:	98 7f       	andi	r25, 0xF8	; 248
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	98 32       	cpi	r25, 0x28	; 40
 238:	09 f4       	brne	.+2      	; 0x23c <i2c_write+0x22>
 23a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
}/* i2c_write */
 23c:	08 95       	ret

0000023e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 23e:	84 ec       	ldi	r24, 0xC4	; 196
 240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 23       	and	r24, r24
 24c:	ec f7       	brge	.-6      	; 0x248 <i2c_readAck+0xa>

    return TWDR;
 24e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}/* i2c_readAck */
 252:	08 95       	ret

00000254 <i2c_readNack>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNack(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
 25a:	ec eb       	ldi	r30, 0xBC	; 188
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	ec f7       	brge	.-6      	; 0x25e <i2c_readNack+0xa>
	
    return TWDR;
 264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}/* i2c_readNak */
 268:	08 95       	ret

0000026a <send_char>:
		x++;
		while ( !(UCSR0A & (1<<RXC0)) );
	}
	*x = UDR0;
	return x;
}
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	ac 01       	movw	r20, r24
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	e0 ec       	ldi	r30, 0xC0	; 192
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	66 ec       	ldi	r22, 0xC6	; 198
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	0a c0       	rjmp	.+20     	; 0x294 <send_char+0x2a>
 280:	90 81       	ld	r25, Z
 282:	95 ff       	sbrs	r25, 5
 284:	fd cf       	rjmp	.-6      	; 0x280 <send_char+0x16>
 286:	da 01       	movw	r26, r20
 288:	8d 91       	ld	r24, X+
 28a:	ad 01       	movw	r20, r26
 28c:	db 01       	movw	r26, r22
 28e:	8c 93       	st	X, r24
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	de 01       	movw	r26, r28
 296:	0d 90       	ld	r0, X+
 298:	00 20       	and	r0, r0
 29a:	e9 f7       	brne	.-6      	; 0x296 <send_char+0x2c>
 29c:	11 97       	sbiw	r26, 0x01	; 1
 29e:	ac 1b       	sub	r26, r28
 2a0:	bd 0b       	sbc	r27, r29
 2a2:	2a 17       	cp	r18, r26
 2a4:	3b 07       	cpc	r19, r27
 2a6:	60 f3       	brcs	.-40     	; 0x280 <send_char+0x16>
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <init_usart>:
 2ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 2b2:	87 e6       	ldi	r24, 0x67	; 103
 2b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 2b8:	e2 ec       	ldi	r30, 0xC2	; 194
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	86 60       	ori	r24, 0x06	; 6
 2c0:	80 83       	st	Z, r24
 2c2:	e1 ec       	ldi	r30, 0xC1	; 193
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	88 69       	ori	r24, 0x98	; 152
 2ca:	80 83       	st	Z, r24
 2cc:	08 95       	ret

000002ce <SendString>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 81       	ld	r18, Z
 2d6:	22 23       	and	r18, r18
 2d8:	69 f0       	breq	.+26     	; 0x2f4 <SendString+0x26>
 2da:	dc 01       	movw	r26, r24
 2dc:	11 96       	adiw	r26, 0x01	; 1
 2de:	e0 ec       	ldi	r30, 0xC0	; 192
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	c6 ec       	ldi	r28, 0xC6	; 198
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	90 81       	ld	r25, Z
 2e8:	95 ff       	sbrs	r25, 5
 2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <SendString+0x18>
 2ec:	28 83       	st	Y, r18
 2ee:	2d 91       	ld	r18, X+
 2f0:	21 11       	cpse	r18, r1
 2f2:	f9 cf       	rjmp	.-14     	; 0x2e6 <SendString+0x18>
 2f4:	e0 ec       	ldi	r30, 0xC0	; 192
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	85 ff       	sbrs	r24, 5
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <SendString+0x2a>
 2fe:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <DS3231_getDateTime>:
	char months[3];
	char days[3];
};

void DS3231_getDateTime(void)
{
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	62 97       	sbiw	r28, 0x12	; 18
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
	struct DateTime dateAndTime;
	
	ds3231_GetDateTime(&today);
 324:	84 e5       	ldi	r24, 0x54	; 84
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	21 df       	rcall	.-446    	; 0x16c <ds3231_GetDateTime>
	
	//Converts the Binary Coded Decimal (BCD) to Decimal value and converts it to a number 
	
	itoa(bcd2dec(today.hour) , dateAndTime.hours, 10); //hour
 32a:	04 e5       	ldi	r16, 0x54	; 84
 32c:	12 e0       	ldi	r17, 0x02	; 2
 32e:	f8 01       	movw	r30, r16
 330:	82 81       	ldd	r24, Z+2	; 0x02
 332:	4d df       	rcall	.-358    	; 0x1ce <bcd2dec>
 334:	4a e0       	ldi	r20, 0x0A	; 10
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	be 01       	movw	r22, r28
 33a:	6f 5f       	subi	r22, 0xFF	; 255
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	df d0       	rcall	.+446    	; 0x500 <itoa>
	itoa(bcd2dec(today.min), dateAndTime.minutes, 10);  //min
 342:	f8 01       	movw	r30, r16
 344:	81 81       	ldd	r24, Z+1	; 0x01
 346:	43 df       	rcall	.-378    	; 0x1ce <bcd2dec>
 348:	4a e0       	ldi	r20, 0x0A	; 10
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	be 01       	movw	r22, r28
 34e:	6c 5f       	subi	r22, 0xFC	; 252
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	d5 d0       	rcall	.+426    	; 0x500 <itoa>
	itoa(bcd2dec(today.sec), dateAndTime.seconds, 10);   //sec
 356:	f8 01       	movw	r30, r16
 358:	80 81       	ld	r24, Z
 35a:	39 df       	rcall	.-398    	; 0x1ce <bcd2dec>
 35c:	4a e0       	ldi	r20, 0x0A	; 10
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	be 01       	movw	r22, r28
 362:	69 5f       	subi	r22, 0xF9	; 249
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	cb d0       	rcall	.+406    	; 0x500 <itoa>
	itoa(bcd2dec(today.date), dateAndTime.days, 10);  //day
 36a:	f8 01       	movw	r30, r16
 36c:	84 81       	ldd	r24, Z+4	; 0x04
 36e:	2f df       	rcall	.-418    	; 0x1ce <bcd2dec>
 370:	4a e0       	ldi	r20, 0x0A	; 10
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	be 01       	movw	r22, r28
 376:	60 5f       	subi	r22, 0xF0	; 240
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	c1 d0       	rcall	.+386    	; 0x500 <itoa>
	itoa(bcd2dec(today.month), dateAndTime.months, 10); //month
 37e:	f8 01       	movw	r30, r16
 380:	85 81       	ldd	r24, Z+5	; 0x05
 382:	25 df       	rcall	.-438    	; 0x1ce <bcd2dec>
 384:	4a e0       	ldi	r20, 0x0A	; 10
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	be 01       	movw	r22, r28
 38a:	63 5f       	subi	r22, 0xF3	; 243
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	b7 d0       	rcall	.+366    	; 0x500 <itoa>
	itoa(bcd2dec(today.year), dateAndTime.years, 10);  //year
 392:	f8 01       	movw	r30, r16
 394:	86 81       	ldd	r24, Z+6	; 0x06
 396:	1b df       	rcall	.-458    	; 0x1ce <bcd2dec>
 398:	4a e0       	ldi	r20, 0x0A	; 10
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	be 01       	movw	r22, r28
 39e:	66 5f       	subi	r22, 0xF6	; 246
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	ad d0       	rcall	.+346    	; 0x500 <itoa>
 3a6:	04 e1       	ldi	r16, 0x14	; 20
 3a8:	12 e0       	ldi	r17, 0x02	; 2
	
	strcat(msg,"Time: ");
 3aa:	d8 01       	movw	r26, r16
 3ac:	0d 90       	ld	r0, X+
 3ae:	00 20       	and	r0, r0
 3b0:	e9 f7       	brne	.-6      	; 0x3ac <DS3231_getDateTime+0xa4>
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	f2 e0       	ldi	r31, 0x02	; 2
 3ba:	01 90       	ld	r0, Z+
 3bc:	0d 92       	st	X+, r0
 3be:	8a 95       	dec	r24
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <DS3231_getDateTime+0xb2>
 3c2:	be 01       	movw	r22, r28
	strcat(msg,dateAndTime.hours);   //hour
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	c8 01       	movw	r24, r16
 3ca:	8f d0       	rcall	.+286    	; 0x4ea <strcat>
 3cc:	f8 01       	movw	r30, r16
 3ce:	01 90       	ld	r0, Z+
	strcat(msg,":");
 3d0:	00 20       	and	r0, r0
 3d2:	e9 f7       	brne	.-6      	; 0x3ce <DS3231_getDateTime+0xc6>
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	0f 2e       	mov	r0, r31
 3d8:	fa e3       	ldi	r31, 0x3A	; 58
 3da:	ef 2e       	mov	r14, r31
 3dc:	f1 2c       	mov	r15, r1
 3de:	f0 2d       	mov	r31, r0
 3e0:	f1 82       	std	Z+1, r15	; 0x01
 3e2:	e0 82       	st	Z, r14
 3e4:	be 01       	movw	r22, r28

	strcat(msg,dateAndTime.minutes);  //min
 3e6:	6c 5f       	subi	r22, 0xFC	; 252
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	c8 01       	movw	r24, r16
 3ec:	7e d0       	rcall	.+252    	; 0x4ea <strcat>
 3ee:	f8 01       	movw	r30, r16
	strcat(msg,":");
 3f0:	01 90       	ld	r0, Z+
 3f2:	00 20       	and	r0, r0
 3f4:	e9 f7       	brne	.-6      	; 0x3f0 <DS3231_getDateTime+0xe8>
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	f1 82       	std	Z+1, r15	; 0x01
 3fa:	e0 82       	st	Z, r14
 3fc:	be 01       	movw	r22, r28
	
	strcat(msg,dateAndTime.seconds);   //sec
 3fe:	69 5f       	subi	r22, 0xF9	; 249
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	c8 01       	movw	r24, r16
 404:	72 d0       	rcall	.+228    	; 0x4ea <strcat>
 406:	d8 01       	movw	r26, r16
 408:	0d 90       	ld	r0, X+
	strcat(msg," Date: ");
 40a:	00 20       	and	r0, r0
 40c:	e9 f7       	brne	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40e:	11 97       	sbiw	r26, 0x01	; 1
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	e7 e0       	ldi	r30, 0x07	; 7
 414:	f2 e0       	ldi	r31, 0x02	; 2
 416:	01 90       	ld	r0, Z+
 418:	0d 92       	st	X+, r0
 41a:	8a 95       	dec	r24
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	be 01       	movw	r22, r28
	
	strcat(msg,dateAndTime.days);   //day
 420:	60 5f       	subi	r22, 0xF0	; 240
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	c8 01       	movw	r24, r16
 426:	61 d0       	rcall	.+194    	; 0x4ea <strcat>
 428:	f8 01       	movw	r30, r16
	strcat(msg,"/");
 42a:	01 90       	ld	r0, Z+
 42c:	00 20       	and	r0, r0
 42e:	e9 f7       	brne	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	8f e2       	ldi	r24, 0x2F	; 47
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	80 83       	st	Z, r24
 43a:	be 01       	movw	r22, r28
	
	strcat(msg,dateAndTime.months);   //month
 43c:	63 5f       	subi	r22, 0xF3	; 243
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	c8 01       	movw	r24, r16
 442:	53 d0       	rcall	.+166    	; 0x4ea <strcat>
 444:	f8 01       	movw	r30, r16
	strcat(msg,"/20");
 446:	01 90       	ld	r0, Z+
 448:	00 20       	and	r0, r0
 44a:	e9 f7       	brne	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	8f e2       	ldi	r24, 0x2F	; 47
 450:	92 e3       	ldi	r25, 0x32	; 50
 452:	91 83       	std	Z+1, r25	; 0x01
 454:	80 83       	st	Z, r24
 456:	80 e3       	ldi	r24, 0x30	; 48
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	93 83       	std	Z+3, r25	; 0x03
	
	strcat(msg,dateAndTime.years);   //year
 45c:	82 83       	std	Z+2, r24	; 0x02
 45e:	be 01       	movw	r22, r28
 460:	66 5f       	subi	r22, 0xF6	; 246
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	c8 01       	movw	r24, r16
 466:	41 d0       	rcall	.+130    	; 0x4ea <strcat>
	
	send_char(msg);
 468:	c8 01       	movw	r24, r16
 46a:	ff de       	rcall	.-514    	; 0x26a <send_char>
 46c:	8f e0       	ldi	r24, 0x0F	; 15
	SendString("\n");
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	2e df       	rcall	.-420    	; 0x2ce <SendString>
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	f8 01       	movw	r30, r16
	memset(msg,0,64); //The memset() function returns a pointer to the memory area dest.
 476:	11 92       	st	Z+, r1
 478:	8a 95       	dec	r24
 47a:	e9 f7       	brne	.-6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47c:	62 96       	adiw	r28, 0x12	; 18
 47e:	0f b6       	in	r0, 0x3f	; 63
}
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	ef 90       	pop	r14
 494:	08 95       	ret

00000496 <main>:
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
char msg[64];

rtc_t today;

int main(void)
{
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	27 97       	sbiw	r28, 0x07	; 7
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
	init_usart();
 4aa:	01 df       	rcall	.-510    	; 0x2ae <init_usart>
	i2c_init();
 4ac:	9b de       	rcall	.-714    	; 0x1e4 <i2c_init>
	init_ds3231();
 4ae:	3a de       	rcall	.-908    	; 0x124 <init_ds3231>
	rtc_t rtc;
	
	rtc.hour = dec2bcd(8);
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	7a de       	rcall	.-780    	; 0x1a8 <dec2bcd>
 4b4:	8b 83       	std	Y+3, r24	; 0x03
	rtc.min =  dec2bcd(55);
 4b6:	87 e3       	ldi	r24, 0x37	; 55
 4b8:	77 de       	rcall	.-786    	; 0x1a8 <dec2bcd>
 4ba:	8a 83       	std	Y+2, r24	; 0x02
	rtc.sec =  dec2bcd(10);
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	74 de       	rcall	.-792    	; 0x1a8 <dec2bcd>
 4c0:	89 83       	std	Y+1, r24	; 0x01
	rtc.date = dec2bcd(29);  // 28
 4c2:	8d e1       	ldi	r24, 0x1D	; 29
 4c4:	71 de       	rcall	.-798    	; 0x1a8 <dec2bcd>
 4c6:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = dec2bcd(10); // 10
 4c8:	8a e0       	ldi	r24, 0x0A	; 10
 4ca:	6e de       	rcall	.-804    	; 0x1a8 <dec2bcd>
 4cc:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = dec2bcd(20);  // 2020
 4ce:	84 e1       	ldi	r24, 0x14	; 20
 4d0:	6b de       	rcall	.-810    	; 0x1a8 <dec2bcd>
 4d2:	8f 83       	std	Y+7, r24	; 0x07
	rtc.weekDay = 3;         // Wednesday: 3rd day of week considering Monday as first day.
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	8c 83       	std	Y+4, r24	; 0x04
	
	ds3231_SetDateTime(&rtc);
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	2d de       	rcall	.-934    	; 0x138 <ds3231_SetDateTime>
 4de:	14 df       	rcall	.-472    	; 0x308 <DS3231_getDateTime>
	while (1)
	{
		DS3231_getDateTime();
 4e0:	8a e6       	ldi	r24, 0x6A	; 106
 4e2:	8a 95       	dec	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <main+0x4c>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x52>
 4e8:	fa cf       	rjmp	.-12     	; 0x4de <main+0x48>

000004ea <strcat>:
 4ea:	fb 01       	movw	r30, r22
 4ec:	dc 01       	movw	r26, r24
 4ee:	0d 90       	ld	r0, X+
 4f0:	00 20       	and	r0, r0
 4f2:	e9 f7       	brne	.-6      	; 0x4ee <strcat+0x4>
 4f4:	11 97       	sbiw	r26, 0x01	; 1
 4f6:	01 90       	ld	r0, Z+
 4f8:	0d 92       	st	X+, r0
 4fa:	00 20       	and	r0, r0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <strcat+0xc>
 4fe:	08 95       	ret

00000500 <itoa>:
 500:	45 32       	cpi	r20, 0x25	; 37
 502:	51 05       	cpc	r21, r1
 504:	18 f4       	brcc	.+6      	; 0x50c <itoa+0xc>
 506:	42 30       	cpi	r20, 0x02	; 2
 508:	08 f0       	brcs	.+2      	; 0x50c <itoa+0xc>
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__itoa_ncheck>
 50c:	fb 01       	movw	r30, r22
 50e:	10 82       	st	Z, r1
 510:	cb 01       	movw	r24, r22
 512:	08 95       	ret

00000514 <__itoa_ncheck>:
 514:	bb 27       	eor	r27, r27
 516:	4a 30       	cpi	r20, 0x0A	; 10
 518:	31 f4       	brne	.+12     	; 0x526 <__itoa_ncheck+0x12>
 51a:	99 23       	and	r25, r25
 51c:	22 f4       	brpl	.+8      	; 0x526 <__itoa_ncheck+0x12>
 51e:	bd e2       	ldi	r27, 0x2D	; 45
 520:	90 95       	com	r25
 522:	81 95       	neg	r24
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	01 c0       	rjmp	.+2      	; 0x52a <__utoa_common>

00000528 <__utoa_ncheck>:
 528:	bb 27       	eor	r27, r27

0000052a <__utoa_common>:
 52a:	fb 01       	movw	r30, r22
 52c:	55 27       	eor	r21, r21
 52e:	aa 27       	eor	r26, r26
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	aa 1f       	adc	r26, r26
 536:	a4 17       	cp	r26, r20
 538:	10 f0       	brcs	.+4      	; 0x53e <__utoa_common+0x14>
 53a:	a4 1b       	sub	r26, r20
 53c:	83 95       	inc	r24
 53e:	50 51       	subi	r21, 0x10	; 16
 540:	b9 f7       	brne	.-18     	; 0x530 <__utoa_common+0x6>
 542:	a0 5d       	subi	r26, 0xD0	; 208
 544:	aa 33       	cpi	r26, 0x3A	; 58
 546:	08 f0       	brcs	.+2      	; 0x54a <__utoa_common+0x20>
 548:	a9 5d       	subi	r26, 0xD9	; 217
 54a:	a1 93       	st	Z+, r26
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	79 f7       	brne	.-34     	; 0x52e <__utoa_common+0x4>
 550:	b1 11       	cpse	r27, r1
 552:	b1 93       	st	Z+, r27
 554:	11 92       	st	Z+, r1
 556:	cb 01       	movw	r24, r22
 558:	00 c0       	rjmp	.+0      	; 0x55a <strrev>

0000055a <strrev>:
 55a:	dc 01       	movw	r26, r24
 55c:	fc 01       	movw	r30, r24
 55e:	67 2f       	mov	r22, r23
 560:	71 91       	ld	r23, Z+
 562:	77 23       	and	r23, r23
 564:	e1 f7       	brne	.-8      	; 0x55e <strrev+0x4>
 566:	32 97       	sbiw	r30, 0x02	; 2
 568:	04 c0       	rjmp	.+8      	; 0x572 <strrev+0x18>
 56a:	7c 91       	ld	r23, X
 56c:	6d 93       	st	X+, r22
 56e:	70 83       	st	Z, r23
 570:	62 91       	ld	r22, -Z
 572:	ae 17       	cp	r26, r30
 574:	bf 07       	cpc	r27, r31
 576:	c8 f3       	brcs	.-14     	; 0x56a <strrev+0x10>
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
